class generator;
  
  randc bit [3:0] a, b; ////////////rand or randc ////////////// 
  bit [3:0] y;


    /////////////// pre and post randomization ///////////////
    int min;
    int max;
  
  function void pre_randomize(input int min, input int max);
    this.min = min;
    this.max = max;  
  endfunction
  
  constraint data {
    a inside {[min:max]};
    b inside {[min:max]};
  }
  
  function void post_randomize();
    $display("Value of a :%0d and b: %0d", a,b);
  endfunction
 ///////////////////// pre and post randomization end //////////////////////////////////////// 


  //constraint data {a > 15;}      // it checks the randomization property
    
    //   constraint data_a {a > 3; a < 7;}
    //   constraint data_b {b == 3;}
    //   constraint data {3 < a; a < 7 ; b > 0;}       // two operator of "a" cannot be merged together
   
        // adding a range of constraint 
   
    // constraint data {
    //     a inside {[0:8],[10:12],15};
    //     b inside {[0:12]};
    // }
        
        //removing a range of constraint

    // constraint data {
    //     !(a inside {[0:8],[10:12],15});
    //     !(b inside{[0:12]});
    // }


    ////////////////// constraint outside of the class start////////////////////////
    // extern constraint data;
    // extern function void display();
    ////////////////// constraint outside of the class end////////////////////////
endclass

////////////////// constraint outside of the class start////////////////////////
// constraint generator::data {
//     a inside {[0:8],[10:12],15};
//     b inside {[0:12]};
// }

// function void generator::display();
//     $display("Value of a : %0d and b : %0d", a,b);
// endfunction
////////////////// constraint outside of the class end////////////////////////
module tb;
  generator g;
  int i = 0;
    //int status = 0;
  
    initial begin
        g = new();  //if we place constructor at this point than it might be a case when our data will get randomize before the execution of the whole process. 
                    //so to tackle that issue we can place it inside the for loop, where for each loop we can get different object for particular iteration and thus our rand data wont be lost.
        /////////// pre and post randomization start //////////////////
        $display("SPACE 1");
        g.pre_randomize(3,9);
        
        for(i = 0; i<6;i++)begin
            g.randomize();
            #10;
        end
        
        $display("SPACE 2");
        g.pre_randomize(3,9);//3 4 5 6 7 8 9 10 11 12
        
        for(i = 0; i<6;i++)begin
            g.randomize();
            #10;
        end
        /////////// pre and post randomization end //////////////////

        // for(i=0;i<10;i++) begin
        //     // g = new();
        //     g.randomize();
        //     /* 
        //     if(!g.randomize()) begin
        //         $display("Randomization Failed at %0t", $time); 
        //         $finish();
        //     end
        //     */
            
        //     // assert(g.randomize())else 
        //     //     begin
        //     //         $display("Randomization Failed at %0t", $time); 
        //     //         $finish();
        //     //     end
            
            // $display("Value of a :%0d and b: %0d", g.a,g.b);
            // #10;
    end
endmodule
